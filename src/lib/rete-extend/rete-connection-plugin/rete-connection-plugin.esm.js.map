{"version":3,"file":"rete-connection-plugin.esm.js","sources":["src/pseudoconnection.ts","src/utils.ts","src/flow/base.ts","src/flow/utils.ts","src/flow/builtin/bidirect.ts","src/flow/builtin/classic/sync-connections.ts","src/flow/builtin/classic/index.ts","src/presets/classic.ts","src/presets/index.ts","src/index.ts"],"sourcesContent":["import { getUID } from 'rete'\r\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\r\n\r\nimport { ClassicScheme, Position, SocketData } from './types'\r\n\r\n/**\r\n * Create pseudoconnection. Used to trigger rendering of connection that is being created by user.\r\n * Has additional `isPseudo` property in payload.\r\n * @param extra Extra payload to add to connection\r\n */\r\nexport function createPseudoconnection<Schemes extends ClassicScheme, K>(extra?: Partial<Schemes['Connection']>) {\r\n  let element: HTMLElement | null = null\r\n  let id: string | null = null\r\n\r\n  function unmount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\r\n    if (id) {\r\n      areaPlugin.removeConnectionView(id)\r\n    }\r\n    element = null\r\n    id = null\r\n  }\r\n  function mount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\r\n    unmount(areaPlugin)\r\n    id = `pseudo_${getUID()}`\r\n  }\r\n\r\n  return {\r\n    isMounted() {\r\n      return Boolean(id)\r\n    },\r\n    mount,\r\n    // eslint-disable-next-line complexity\r\n    render(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>, { x, y }: Position, data: SocketData) {\r\n      const isOutput = data.side === 'output'\r\n      const pointer = { x: x + (isOutput ? -3 : 3), y } // fix hover of underlying elements\r\n\r\n      if (!id) throw new Error('pseudo connection id wasn\\'t generated')\r\n\r\n      const payload = isOutput ? {\r\n        id,\r\n        source: data.nodeId,\r\n        sourceOutput: data.key,\r\n        target: '',\r\n        targetInput: '',\r\n        ...(extra || {})\r\n      } : {\r\n        id,\r\n        target: data.nodeId,\r\n        targetInput: data.key,\r\n        source: '',\r\n        sourceOutput: '',\r\n        ...(extra || {})\r\n      }\r\n\r\n      if (!element) {\r\n        const view = areaPlugin.addConnectionView(payload)\r\n\r\n        element = view.element\r\n      }\r\n\r\n      if (!element) return\r\n\r\n      areaPlugin.emit({\r\n        type: 'render', data: {\r\n          element,\r\n          type: 'connection',\r\n          payload,\r\n          ...(isOutput ? { end: pointer } : { start: pointer })\r\n        }\r\n      })\r\n    },\r\n    unmount\r\n  }\r\n}\r\n","import { SocketData } from './types'\r\n/**\r\n * @param elements list of Element returned by document.elementsFromPoint\r\n */\r\nexport function findSocket(socketsCache: WeakMap<Element, SocketData>, elements: Element[]) {\r\n  for (const element of elements) {\r\n    const found = socketsCache.get(element)\r\n\r\n    if (found) {\r\n      return found\r\n    }\r\n  }\r\n}\r\n","import { BaseSchemes, NodeEditor, Scope } from 'rete'\r\n\r\nimport { Connection, SocketData } from '../types'\r\n\r\nexport type Context<Schemes extends BaseSchemes, K extends any[]> = {\r\n    editor: NodeEditor<Schemes>\r\n    scope: Scope<Connection, K>\r\n    socketsCache: Map<Element, SocketData>\r\n}\r\nexport type EventType = 'up' | 'down'\r\nexport type PickParams = { socket: SocketData, event: EventType }\r\n\r\nexport abstract class Flow<Schemes extends BaseSchemes, K extends any[]> {\r\n    public abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\r\n    public abstract getPickedSocket(): SocketData | undefined\r\n    public abstract drop(context: Context<Schemes, K>): void\r\n}\r\n","import { getUID } from 'rete'\r\n\r\nimport { ClassicScheme, SocketData } from '../types'\r\nimport { Context, PickParams } from './base'\r\n\r\nexport interface StateContext<Schemes extends ClassicScheme, K extends any[]> {\r\n  currentState: State<Schemes, K>\r\n  switchTo(state: State<Schemes, K>): void\r\n}\r\n\r\nexport abstract class State<Schemes extends ClassicScheme, K extends any[]> {\r\n  context!: StateContext<Schemes, K>\r\n  initial: SocketData | undefined\r\n\r\n  setContext(context: StateContext<Schemes, K>) {\r\n    this.context = context\r\n  }\r\n\r\n  abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\r\n  abstract drop(context: Context<Schemes, K>): void\r\n}\r\n\r\nexport function getSourceTarget(initial: SocketData, socket: SocketData) {\r\n  const forward = initial.side === 'output' && socket.side === 'input'\r\n  const backward = initial.side === 'input' && socket.side === 'output'\r\n  const [source, target] = forward\r\n    ? [initial, socket]\r\n    : (backward ? [socket, initial] : [])\r\n\r\n  if (source && target) return [source, target]\r\n}\r\n\r\nexport function canMakeConnection(initial: SocketData, socket: SocketData) {\r\n  return Boolean(getSourceTarget(initial, socket))\r\n}\r\n\r\nexport function makeConnection<Schemes extends ClassicScheme, K extends any[]>(initial: SocketData, socket: SocketData, context: Context<Schemes, K>) {\r\n  const [source, target] = getSourceTarget(initial, socket) || [null, null]\r\n\r\n  if (source && target) {\r\n    context.editor.addConnection({\r\n      id: getUID(),\r\n      source: source.nodeId,\r\n      sourceOutput: source.key,\r\n      target: target.nodeId,\r\n      targetInput: target.key\r\n    })\r\n    return true\r\n  }\r\n}\r\n","import { ClassicScheme, SocketData } from '../../types'\r\nimport { Context, Flow, PickParams } from '../base'\r\nimport { makeConnection as defaultMakeConnection, State, StateContext } from '../utils'\r\n\r\n/**\r\n * Bidirect flow params\r\n */\r\nexport type BidirectParams<Schemes extends ClassicScheme> = {\r\n  /** If true, user can pick a pseudo-connection by clicking on socket, not only by pointerdown */\r\n  pickByClick: boolean\r\n  /** Custom function to make connection */\r\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\r\n}\r\n\r\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(public initial: SocketData, private params: BidirectParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (this.params.makeConnection(this.initial, socket, context)) {\r\n      this.drop(context, socket, true)\r\n    } else if (!this.params.pickByClick) {\r\n      this.drop(context, socket)\r\n    }\r\n  }\r\n\r\n  drop(context: Context<ClassicScheme, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\r\n  }\r\n}\r\n\r\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(private params: BidirectParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (event === 'down') {\r\n      if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\r\n        this.context.switchTo(new Picked(socket, this.params))\r\n      } else {\r\n        this.drop(context)\r\n      }\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    delete this.initial\r\n  }\r\n}\r\n\r\n/**\r\n * Bidirect flow. User can pick a socket and connect it by releasing mouse button.\r\n * More simple than classic flow, but less functional (can't remove connection by clicking on input socket).\r\n */\r\nexport class BidirectFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\r\n  currentState!: State<Schemes, K>\r\n\r\n  constructor(params?: Partial<BidirectParams<Schemes>>) {\r\n    const pickByClick = Boolean(params?.pickByClick)\r\n    const makeConnection = params?.makeConnection || defaultMakeConnection\r\n\r\n    this.switchTo(new Idle({ pickByClick, makeConnection }))\r\n  }\r\n\r\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\r\n    await this.currentState.pick(params, context)\r\n  }\r\n\r\n  public getPickedSocket() {\r\n    return this.currentState.initial\r\n  }\r\n\r\n  public drop(context: Context<Schemes, K>) {\r\n    this.currentState.drop(context)\r\n  }\r\n\r\n  public switchTo(state: State<Schemes, K>): void {\r\n    state.setContext(this)\r\n    this.currentState = state\r\n  }\r\n}\r\n","import { NodeEditor } from 'rete'\r\n\r\nimport { ClassicScheme, SocketData } from '../../../types'\r\n\r\nfunction findPort<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\r\n  const node = editor.getNode(socket.nodeId)\r\n\r\n  if (!node) throw new Error('cannot find node')\r\n\r\n  const list = socket.side === 'input' ? node.inputs : node.outputs\r\n\r\n  return list[socket.key]\r\n}\r\nfunction findConnections<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\r\n  const { nodeId, side, key } = socket\r\n\r\n  return editor.getConnections().filter(connection => {\r\n    if (side === 'input') {\r\n      return connection.target === nodeId && connection.targetInput === key\r\n    }\r\n    if (side === 'output') {\r\n      return connection.source === nodeId && connection.sourceOutput === key\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Remove existing connections if Port doesnt allow multiple connections\r\n */\r\nexport function syncConnections<Schemes extends ClassicScheme>(sockets: SocketData[], editor: NodeEditor<Schemes>) {\r\n  const connections: Schemes['Connection'][] = sockets.map(socket => {\r\n    const port = findPort(socket, editor)\r\n    const multiple = port?.multipleConnections\r\n\r\n    if (multiple) return []\r\n\r\n    return findConnections(socket, editor)\r\n  }).flat()\r\n\r\n  return {\r\n    commit() {\r\n      const uniqueIds = Array.from(new Set(connections.map(({ id }) => id)))\r\n\r\n      uniqueIds.forEach(id => editor.removeConnection(id))\r\n    }\r\n  }\r\n}\r\n","\r\nimport { ClassicScheme, SocketData } from '../../../types'\r\nimport { Context, Flow, PickParams } from '../../base'\r\nimport {\r\n  canMakeConnection as defaultCanMakeConnection, makeConnection as defaultMakeConnection, State, StateContext\r\n} from '../../utils'\r\nimport { syncConnections } from './sync-connections'\r\n\r\n/**\r\n * Classic flow params\r\n */\r\nexport type ClassicParams<Schemes extends ClassicScheme> = {\r\n  /** Custom function to check if connection can be made */\r\n  canMakeConnection: (from: SocketData, to: SocketData) => boolean | undefined\r\n  /** Custom function to make connection */\r\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\r\n}\r\n\r\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(public initial: SocketData, private params: ClassicParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (this.params.canMakeConnection(this.initial, socket)) {\r\n      syncConnections([this.initial, socket], context.editor).commit()\r\n      const created = this.params.makeConnection(this.initial, socket, context)\r\n\r\n      this.drop(context, created ? socket : null, created)\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    this.context.switchTo(new Idle(this.params))\r\n  }\r\n}\r\n\r\nclass PickedExisting<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  initial!: SocketData\r\n  outputSocket: SocketData\r\n\r\n  constructor(public connection: Schemes['Connection'], private params: ClassicParams<Schemes>, context: Context<Schemes, K>) {\r\n    super()\r\n    const outputSocket = Array.from(context.socketsCache.values()).find(data => {\r\n      return data.nodeId === this.connection.source\r\n        && data.side === 'output'\r\n        && data.key === this.connection.sourceOutput\r\n    })\r\n\r\n    if (!outputSocket) throw new Error('cannot find output socket')\r\n\r\n    this.outputSocket = outputSocket\r\n  }\r\n\r\n  async init(context: Context<Schemes, K>) {\r\n    context.scope.emit({ type: 'connectionpick', data: { socket: this.outputSocket } }).then(response => {\r\n      if (response) {\r\n        context.editor.removeConnection(this.connection.id)\r\n        this.initial = this.outputSocket\r\n      } else {\r\n        this.drop(context)\r\n      }\r\n    })\r\n  }\r\n\r\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (this.initial && !(socket.side === 'input' && this.connection.target === socket.nodeId && this.connection.targetInput === socket.key)) {\r\n      if (this.params.canMakeConnection(this.initial, socket)) {\r\n        syncConnections([this.initial, socket], context.editor).commit()\r\n        const created = this.params.makeConnection(this.initial, socket, context)\r\n\r\n        this.drop(context, created ? socket : null, created)\r\n      }\r\n    } else if (event === 'down') {\r\n      if (this.initial) {\r\n        syncConnections([this.initial, socket], context.editor).commit()\r\n        const created = this.params.makeConnection(this.initial, socket, context)\r\n\r\n        this.drop(context, created ? socket : null, created)\r\n      }\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\r\n  }\r\n}\r\n\r\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(private params: ClassicParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (event !== 'down') return\r\n    if (socket.side === 'input') {\r\n      const connection = context\r\n        .editor.getConnections()\r\n        .find(item => item.target === socket.nodeId && item.targetInput === socket.key)\r\n\r\n      if (connection) {\r\n        const state = new PickedExisting(connection, this.params, context)\r\n\r\n        await state.init(context)\r\n        this.context.switchTo(state)\r\n        return\r\n      }\r\n    }\r\n\r\n    if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\r\n      this.context.switchTo(new Picked(socket, this.params))\r\n    } else {\r\n      this.drop(context)\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    delete this.initial\r\n  }\r\n}\r\n\r\n/**\r\n * Classic flow. User can pick/click a socket and connect it by releasing/clicking on another socket.\r\n * If connection already exists and user clicks on input socket, connection will be removed.\r\n */\r\nexport class ClassicFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\r\n  currentState!: State<Schemes, K>\r\n\r\n  constructor(params?: Partial<ClassicParams<Schemes>>) {\r\n    const canMakeConnection = params?.canMakeConnection || defaultCanMakeConnection\r\n    const makeConnection = params?.makeConnection || defaultMakeConnection\r\n\r\n    this.switchTo(new Idle<Schemes, K>({ canMakeConnection, makeConnection }))\r\n  }\r\n\r\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\r\n    await this.currentState.pick(params, context)\r\n  }\r\n\r\n  public getPickedSocket() {\r\n    return this.currentState.initial\r\n  }\r\n\r\n  public switchTo(state: State<Schemes, K>): void {\r\n    state.setContext(this)\r\n    this.currentState = state\r\n  }\r\n\r\n  public drop(context: Context<Schemes, K>) {\r\n    this.currentState.drop(context)\r\n  }\r\n}\r\n","import { ClassicFlow, ClassicParams } from '../flow'\r\nimport { ClassicScheme } from '../types'\r\n\r\n/**\r\n * Classic preset. Uses `ClassicFlow` for managing connections by user\r\n */\r\nexport function setup<Schemes extends ClassicScheme>(params?: Partial<ClassicParams<Schemes>>) {\r\n  return () => new ClassicFlow(params)\r\n}\r\n","/**\r\n * Built-in presets\r\n * @module\r\n */\r\nexport * as classic from './classic'\r\n","import { NodeEditor, Scope } from 'rete'\r\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\r\n\r\nimport { Flow } from './flow'\r\nimport { EventType } from './flow/base'\r\nimport { createPseudoconnection } from './pseudoconnection'\r\nimport { ClassicScheme, Connection, Position, Preset, Side, SocketData } from './types'\r\nimport { findSocket } from './utils'\r\n\r\nexport * from './flow'\r\nexport * as Presets from './presets'\r\nexport { createPseudoconnection } from './pseudoconnection'\r\nexport type { Connection, ConnectionExtra, Preset, Side, SocketData } from './types'\r\n\r\ntype Requires =\r\n  | { type: 'pointermove', data: { position: Position, event: PointerEvent } }\r\n  | { type: 'pointerup', data: { position: Position, event: PointerEvent } }\r\n  | RenderSignal<'socket', {\r\n    nodeId: string,\r\n    side: Side,\r\n    key: string\r\n  }>\r\n  | { type: 'unmount', data: { element: HTMLElement } }\r\n\r\nexport interface ConnectionPluginProps {\r\n  // 根据起点socket的信息，判断这个socket是否可以发出连线（比如需要限制input侧不可以连线）\r\n  canMakePreudo(socketData:SocketData):boolean\r\n}\r\n\r\n/**\r\n * Connection plugin. Responsible for user interaction with connections (creation, deletion)\r\n * @priority 9\r\n * @emits connectionpick\r\n * @emits connectiondrop\r\n * @listens pointermove\r\n * @listens pointerup\r\n * @listens render\r\n * @listens unmount\r\n */\r\nexport class ConnectionPlugin<Schemes extends ClassicScheme, K = Requires> extends Scope<Connection, [Requires | K]> {\r\n  presets: Preset<Schemes>[] = []\r\n  private areaPlugin!: BaseAreaPlugin<Schemes, BaseArea<Schemes>>\r\n  private editor!: NodeEditor<Schemes>\r\n  private currentFlow: Flow<Schemes, any[]> | null = null\r\n  private preudoconnection = createPseudoconnection({ isPseudo: true })\r\n  private socketsCache = new Map<Element, SocketData>()\r\n  private props: ConnectionPluginProps\r\n\r\n  constructor(props?:ConnectionPluginProps) {\r\n    super('connection')\r\n\r\n    this.props = props || {\r\n      canMakePreudo: () => true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add preset to the plugin\r\n   * @param preset Preset to add\r\n   */\r\n  public addPreset(preset: Preset<Schemes>) {\r\n    this.presets.push(preset)\r\n  }\r\n\r\n  private findPreset(data: SocketData) {\r\n    for (const preset of this.presets) {\r\n      const flow = preset(data)\r\n\r\n      if (flow) return flow\r\n    }\r\n    return null\r\n  }\r\n\r\n  update() {\r\n    if (!this.currentFlow) return\r\n    const socket = this.currentFlow.getPickedSocket()\r\n\r\n    if (socket) {\r\n      this.preudoconnection.render(this.areaPlugin, this.areaPlugin.area.pointer, socket)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop pseudo-connection if exists\r\n   * @emits connectiondrop\r\n   */\r\n  drop() {\r\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\r\n\r\n    if (this.currentFlow) {\r\n      this.currentFlow.drop(flowContext)\r\n      this.preudoconnection.unmount(this.areaPlugin)\r\n      this.currentFlow = null\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line max-statements\r\n  async pick(event: PointerEvent, type: EventType) {\r\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\r\n    const pointedElements = document.elementsFromPoint(event.clientX, event.clientY)\r\n    const pickedSocket = findSocket(this.socketsCache, pointedElements)\r\n\r\n    if (pickedSocket) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      this.currentFlow = this.currentFlow || this.findPreset(pickedSocket)\r\n\r\n      if (this.currentFlow) {\r\n        if (!this.currentFlow.getPickedSocket() && !this.props.canMakePreudo(pickedSocket)) {\r\n          return\r\n        }\r\n        await this.currentFlow.pick({ socket: pickedSocket, event: type }, flowContext)\r\n        this.preudoconnection.mount(this.areaPlugin)\r\n      }\r\n    } else if (this.currentFlow) {\r\n      this.currentFlow.drop(flowContext)\r\n    }\r\n    if (this.currentFlow && !this.currentFlow.getPickedSocket()) {\r\n      this.preudoconnection.unmount(this.areaPlugin)\r\n      this.currentFlow = null\r\n    }\r\n    this.update()\r\n  }\r\n\r\n  setParent(scope: Scope<Requires | K>): void {\r\n    super.setParent(scope)\r\n    this.areaPlugin = this.parentScope<BaseAreaPlugin<Schemes, BaseArea<Schemes>>>(BaseAreaPlugin)\r\n    this.editor = this.areaPlugin.parentScope<NodeEditor<Schemes>>(NodeEditor)\r\n\r\n    const pointerdownSocket = (e: PointerEvent) => {\r\n      this.pick(e, 'down')\r\n    }\r\n\r\n    // eslint-disable-next-line max-statements\r\n    this.addPipe(context => {\r\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\r\n\r\n      if (context.type === 'pointermove') {\r\n        this.update()\r\n      } else if (context.type === 'pointerup') {\r\n        this.pick(context.data.event, 'up')\r\n      } else if (context.type === 'render') {\r\n        if (context.data.type === 'socket') {\r\n          const { element } = context.data\r\n\r\n          element.addEventListener('pointerdown', pointerdownSocket)\r\n          this.socketsCache.set(element, context.data)\r\n        }\r\n      } else if (context.type === 'unmount') {\r\n        const { element } = context.data\r\n\r\n        element.removeEventListener('pointerdown', pointerdownSocket)\r\n        this.socketsCache.delete(element)\r\n      }\r\n      return context\r\n    })\r\n  }\r\n}\r\n"],"names":["createPseudoconnection","extra","element","id","unmount","areaPlugin","removeConnectionView","mount","concat","getUID","isMounted","Boolean","render","_ref","data","x","y","isOutput","side","pointer","Error","payload","_objectSpread","source","nodeId","sourceOutput","key","target","targetInput","view","addConnectionView","emit","type","end","start","findSocket","socketsCache","elements","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","found","get","err","e","f","Flow","_createClass","_classCallCheck","State","setContext","context","getSourceTarget","initial","socket","forward","backward","_ref2","_slicedToArray","canMakeConnection","makeConnection","_ref3","_ref4","editor","addConnection","Picked","_State","params","_this","_callSuper","_inherits","_pick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","drop","pickByClick","stop","pick","_x","_x2","apply","arguments","length","undefined","created","scope","switchTo","Idle","_State2","_this2","_pick2","_callee2","event","_callee2$","_context2","sent","_x3","_x4","BidirectFlow","defaultMakeConnection","_pick3","_callee3","_callee3$","_context3","currentState","_x5","_x6","getPickedSocket","state","findPort","node","getNode","list","inputs","outputs","findConnections","getConnections","filter","connection","syncConnections","sockets","connections","map","port","multiple","multipleConnections","flat","commit","uniqueIds","Array","from","Set","forEach","removeConnection","PickedExisting","outputSocket","values","find","_init","_this3","then","response","init","_created","_State3","_this4","_callee4","_connection","_callee4$","_context4","abrupt","item","_x7","ClassicFlow","defaultCanMakeConnection","_pick4","_callee5","_callee5$","_context5","_x8","_x9","setup","ConnectionPlugin","_Scope","props","_defineProperty","isPseudo","Map","canMakePreudo","addPreset","preset","presets","push","findPreset","flow","update","currentFlow","preudoconnection","area","flowContext","pointedElements","pickedSocket","document","elementsFromPoint","clientX","clientY","preventDefault","stopPropagation","setParent","_get","_getPrototypeOf","prototype","call","parentScope","BaseAreaPlugin","NodeEditor","pointerdownSocket","addPipe","_typeof","addEventListener","set","removeEventListener","Scope"],"mappings":"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"}